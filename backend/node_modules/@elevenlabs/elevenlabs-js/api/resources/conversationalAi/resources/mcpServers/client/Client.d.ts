/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as ElevenLabs from "../../../../../index";
import { Tools } from "../resources/tools/client/Client";
import { ApprovalPolicy } from "../resources/approvalPolicy/client/Client";
import { ToolApprovals } from "../resources/toolApprovals/client/Client";
export declare namespace McpServers {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | environments.ElevenLabsEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class McpServers {
    protected readonly _options: McpServers.Options;
    protected _tools: Tools | undefined;
    protected _approvalPolicy: ApprovalPolicy | undefined;
    protected _toolApprovals: ToolApprovals | undefined;
    constructor(_options?: McpServers.Options);
    get tools(): Tools;
    get approvalPolicy(): ApprovalPolicy;
    get toolApprovals(): ToolApprovals;
    /**
     * Retrieve all MCP server configurations available in the workspace.
     *
     * @param {McpServers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.mcpServers.list()
     */
    list(requestOptions?: McpServers.RequestOptions): core.HttpResponsePromise<ElevenLabs.McpServersResponseModel>;
    private __list;
    /**
     * Create a new MCP server configuration in the workspace.
     *
     * @param {ElevenLabs.conversationalAi.McpServerRequestModel} request
     * @param {McpServers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.mcpServers.create({
     *         config: {
     *             url: "url",
     *             name: "name"
     *         }
     *     })
     */
    create(request: ElevenLabs.conversationalAi.McpServerRequestModel, requestOptions?: McpServers.RequestOptions): core.HttpResponsePromise<ElevenLabs.McpServerResponseModel>;
    private __create;
    /**
     * Retrieve a specific MCP server configuration from the workspace.
     *
     * @param {string} mcpServerId - ID of the MCP Server.
     * @param {McpServers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.mcpServers.get("mcp_server_id")
     */
    get(mcpServerId: string, requestOptions?: McpServers.RequestOptions): core.HttpResponsePromise<ElevenLabs.McpServerResponseModel>;
    private __get;
}
