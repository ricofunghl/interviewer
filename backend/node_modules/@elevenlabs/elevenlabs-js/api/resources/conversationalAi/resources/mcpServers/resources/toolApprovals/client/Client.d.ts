/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as ElevenLabs from "../../../../../../../index";
export declare namespace ToolApprovals {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | environments.ElevenLabsEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class ToolApprovals {
    protected readonly _options: ToolApprovals.Options;
    constructor(_options?: ToolApprovals.Options);
    /**
     * Add approval for a specific MCP tool when using per-tool approval mode.
     *
     * @param {string} mcpServerId - ID of the MCP Server.
     * @param {ElevenLabs.conversationalAi.mcpServers.McpToolAddApprovalRequestModel} request
     * @param {ToolApprovals.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.mcpServers.toolApprovals.create("mcp_server_id", {
     *         toolName: "tool_name",
     *         toolDescription: "tool_description"
     *     })
     */
    create(mcpServerId: string, request: ElevenLabs.conversationalAi.mcpServers.McpToolAddApprovalRequestModel, requestOptions?: ToolApprovals.RequestOptions): core.HttpResponsePromise<ElevenLabs.McpServerResponseModel>;
    private __create;
    /**
     * Remove approval for a specific MCP tool when using per-tool approval mode.
     *
     * @param {string} mcpServerId - ID of the MCP Server.
     * @param {string} toolName - Name of the MCP tool to remove approval for.
     * @param {ToolApprovals.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.mcpServers.toolApprovals.delete("mcp_server_id", "tool_name")
     */
    delete(mcpServerId: string, toolName: string, requestOptions?: ToolApprovals.RequestOptions): core.HttpResponsePromise<ElevenLabs.McpServerResponseModel>;
    private __delete;
}
